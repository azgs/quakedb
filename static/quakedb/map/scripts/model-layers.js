// Generated by CoffeeScript 1.6.3
(function() {
  var app, data, models, root, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  if (root.app == null) {
    app = root.app = {};
  } else {
    app = root.app;
  }

  if (app.models == null) {
    models = app.models = {};
  } else {
    models = app.models;
  }

  if (!app.data) {
    data = app.data = {};
  } else {
    data = app.data;
  }

  app.models.LayerModel = (function(_super) {
    __extends(LayerModel, _super);

    function LayerModel() {
      _ref = LayerModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LayerModel.prototype.defaults = {
      id: 'undefined',
      name: 'undefined',
      description: 'undefined',
      service_url: 'undefined',
      namespace: 'undefined',
      active: 'undefined',
      layerOptions: 'undefined'
    };

    LayerModel.prototype.initialize = function(options) {
      return this.set('layer', this.createLayer(options));
    };

    return LayerModel;

  })(Backbone.Model);

  app.models.GeoJSONLayer = (function(_super) {
    __extends(GeoJSONLayer, _super);

    function GeoJSONLayer() {
      _ref1 = GeoJSONLayer.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    GeoJSONLayer.prototype.createLayer = function(options) {
      var callback, thisModel, xhr_url;
      if ((options.service_url != null) && (options.namespace != null)) {
        callback = this.id + 'Data';
        xhr_url = options.service_url;
        xhr_url += '?service=WFS&version=1.0.0&request=GetFeature&outputFormat=text/javascript';
        xhr_url += '&typeName=' + options.namespace;
        xhr_url += '&format_options=callback:app.data.' + callback;
        thisModel = this;
        app.data[callback] = function(data) {
          var layer, max, min, scale, thisData;
          thisData = [];
          data.features.forEach(function(q) {
            return thisData.push(Math.abs(q.properties.calculated_magnitude));
          });
          min = Math.min.apply(null, thisData);
          max = Math.max.apply(null, thisData);
          scale = d3.scale.linear().domain([min, max]).range(d3.range(app.classes));
          ol.expr.register('drawMagSize', function() {
            var feature, magnitude;
            feature = this;
            magnitude = feature.get('calculated_magnitude');
            return Math.abs((magnitude + 1) * 6);
          });
          ol.expr.register('drawColor', function() {
            var feature, magnitude;
            feature = this;
            magnitude = feature.get('calculated_magnitude');
            return app.colors[(scale(magnitude) * 8).toFixed()];
          });
          layer = new ol.layer.Vector({
            source: new ol.source.Vector({
              parser: new ol.parser.GeoJSON(),
              data: data
            }),
            style: options.layerOptions
          });
          thisModel.set('layer', layer);
          if (options.active) {
            return app.map.addLayer(layer);
          }
        };
        return $.ajax({
          url: xhr_url,
          dataType: 'jsonp'
        });
      }
    };

    return GeoJSONLayer;

  })(app.models.LayerModel);

  app.models.LayerCollection = (function(_super) {
    __extends(LayerCollection, _super);

    function LayerCollection() {
      _ref2 = LayerCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    LayerCollection.prototype.model = app.models.LayerModel;

    return LayerCollection;

  })(Backbone.Collection);

}).call(this);
