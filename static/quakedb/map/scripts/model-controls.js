// Generated by CoffeeScript 1.6.3
(function() {
  var app, models, root, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  if (root.app == null) {
    app = root.app = {};
  } else {
    app = root.app;
  }

  if (app.models == null) {
    models = app.models = {};
  } else {
    models = app.models;
  }

  app.models.ControlModel = (function(_super) {
    __extends(ControlModel, _super);

    function ControlModel() {
      _ref = ControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ControlModel.prototype.defaults = {
      href: 'undefined',
      class_disp: 'undefined',
      class_ol: 'undefined'
    };

    ControlModel.prototype.initialize = function(options) {
      return this.set('sidebar', this.createSidebar(options));
    };

    ControlModel.prototype.createSidebar = function(options) {
      app.sidebarControl = function(options) {
        var anchor, element, toggle;
        options = options || {};
        anchor = document.createElement('a');
        anchor.href = options.href;
        anchor.className = options.class_disp;
        $.side = {};
        $.sidebar = 2;
        app.sidebar = function(panels) {
          $.sidebar = panels;
          if (panels === 1) {
            return $('#sidebar').animate({
              right: '-100%'
            });
          } else if (panels === 2) {
            return $('#sidebar').animate({
              right: '0%'
            });
          }
        };
        toggle = function(e) {
          e.preventDefault();
          if ($.sidebar === 2) {
            return app.sidebar(1);
          } else {
            return app.sidebar(2);
          }
        };
        anchor.addEventListener('click', toggle, false);
        element = document.createElement('div');
        element.className = options.class_ol;
        element.appendChild(anchor);
        return ol.control.Control.call(this, {
          element: element,
          target: options.target
        });
      };
      ol.inherits(app.sidebarControl, ol.control.Control);
      return app.map.addControl(new app.sidebarControl(options));
    };

    return ControlModel;

  })(Backbone.Model);

  app.models.ControlCollection = (function(_super) {
    __extends(ControlCollection, _super);

    function ControlCollection() {
      _ref1 = ControlCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ControlCollection.prototype.model = app.models.ControlModel;

    return ControlCollection;

  })(Backbone.Collection);

}).call(this);
