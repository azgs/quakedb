// Generated by CoffeeScript 1.6.3
(function() {
  var app, data, models, root, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  if (root.app == null) {
    app = root.app = {};
  } else {
    app = root.app;
  }

  if (app.models == null) {
    models = app.models = {};
  } else {
    models = app.models;
  }

  if (!app.data) {
    data = app.data = {};
  } else {
    data = app.data;
  }

  app.models.GraphModel = (function(_super) {
    var d3_data;

    __extends(GraphModel, _super);

    function GraphModel() {
      _ref = GraphModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GraphModel.prototype["default"] = {
      title: 'undefined',
      type: 'undefined'
    };

    GraphModel.prototype.initialize = function(options) {
      return this.set('data', d3_data(options));
    };

    d3_data = function(options) {
      var delay, drawgraph;
      drawgraph = function(collection) {
        app.graph_x.domain(d3.extent(collection.features, function(d) {
          return d.properties.calculated_magnitude;
        })).nice();
        app.graph_y.domain(d3.extent(collection.features, function(d) {
          return d.properties.depth;
        })).nice();
        app.scaled_data = [];
        collection.features.forEach(function(d) {
          return app.scaled_data.push(Math.abs(d.properties.calculated_magnitude));
        });
        app.min_mag = d3.min(app.scaled_data);
        app.max_mag = d3.max(app.scaled_data);
        app.scale = d3.scale.linear().domain([app.min_mag, app.max_mag]).range(d3.range(app.classes));
        app.graph_svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + app.graph_height + ")").call(app.graph_x_axis).style("fill", "white").append("text").attr("class", "label").attr("x", app.graph_width).attr("y", -6).style("text-anchor", "end").text("Magnitude");
        app.graph_svg.append("g").attr("class", "y axis").call(app.graph_y_axis).style("fill", "white").append("text").attr("class", "label").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Depth");
        return app.graph_svg.selectAll(".dot").data(collection.features).enter().append("circle").attr("class", "dot").attr("r", 3.5).attr("cx", function(d) {
          return app.graph_x(d.properties.calculated_magnitude);
        }).attr("cy", function(d) {
          return app.graph_y(d.properties.depth);
        }).attr("mag", function(d) {
          return d.properties.calculated_magnitude;
        }).style('fill', function(d) {
          return app.colors[(app.scale(d.properties.calculated_magnitude) * 8).toFixed()];
        }).style('stroke', app.colors[app.classes - 1]).style("opacity", 1);
      };
      delay = function(ms, func) {
        return setTimeout(func, ms);
      };
      return delay(1000, function() {
        return drawgraph(app.thisData);
      });
    };

    return GraphModel;

  })(Backbone.Model);

  app.models.GraphCollection = (function(_super) {
    __extends(GraphCollection, _super);

    function GraphCollection() {
      _ref1 = GraphCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    GraphCollection.prototype.model = app.models.GraphModel;

    return GraphCollection;

  })(Backbone.Collection);

}).call(this);
