// Generated by CoffeeScript 1.6.3
(function() {
  var app, root;

  root = this;

  if (root.app == null) {
    app = root.app = {};
  } else {
    app = root.app;
  }

  app.drawmap = function(collection) {
    var get_date, get_mag, mag_size, setInterval;
    app.scaled_data = [];
    app.date_data = [];
    collection.features.forEach(function(d) {
      var date, date2, date3, date4;
      app.scaled_data.push(Math.abs(d.properties.calculated_magnitude));
      date = d.properties.date;
      date2 = date.split('T');
      date3 = date2[0].split('-');
      date4 = date3[0] + date3[1] + date3[2];
      return app.date_data.push(Math.abs(date4));
    });
    app.min_mag = d3.min(app.scaled_data);
    app.max_mag = d3.max(app.scaled_data);
    app.min_date = d3.min(app.date_data);
    app.max_date = d3.max(app.date_data);
    app.get_small = function() {
      return app.map.g.selectAll('circle').style('stroke-width', 1).style('stroke', app.scheme[app.classes - 1]).transition().ease('linear').duration(1000).attr("r", 5);
    };
    app.get_big = function() {
      return app.map.g.selectAll('circle').style('stroke-width', 1).style('stroke', app.scheme[app.classes - 1]).transition().ease('linear').duration(1000).attr("r", function(d) {
        return Math.abs(d.properties.calculated_magnitude * 4);
      });
    };
    setInterval = function() {
      var circle, repeat;
      circle = d3.select(this);
      repeat = function() {
        return circle = circle.transition().ease('linear').attr('rx', 9).attr('ry', 9).transition().attr('rx', 2.5).attr('ry', 2.5).each('start', repeat);
      };
      return repeat();
    };
    app.mag_g.attr('id', 'blow-up-mag-symbol').append('ellipse').attr('cx', 10).attr('cy', 10).attr('rx', 2.5).attr('ry', 2.5).style('fill', 'black').transition().duration(2000).each(setInterval);
    $.mag_cnt = {};
    $.mag_cnt.size = 1;
    mag_size = function(count) {
      $.mag_cnt.size = count;
      if (count === 1) {
        console.log('1');
        app.get_small();
      } else if (count === 2) {
        console.log('2');
        app.get_big();
      }
      return console.log(count);
    };
    $('.magnitude-style-control').click(function() {
      if ($.mag_cnt.size === 1) {
        console.log($.mag_cnt.size);
        return mag_size(2);
      } else {
        return mag_size(1);
        return console.log($.mag_cnt.size);
      }
    });
    app.reset = function() {
      if ($.mag_cnt.size === 1) {
        app.bottomLeft = app.project(app.bounds[0]);
        app.topRight = app.project(app.bounds[1]);
        app.map.svg.attr('width', app.topRight[0] - app.bottomLeft[0]).attr('height', app.bottomLeft[1] - app.topRight[1]).style('margin-left', app.bottomLeft[0] + 'px').style('margin-top', app.topRight[1] + 'px');
        app.map.g.attr('transform', 'translate(' + -app.bottomLeft[0] + ',' + -app.topRight[1] + ')');
        app.feature.attr("cx", function(d) {
          return app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[0];
        }).attr("cy", function(d) {
          return app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[1];
        }).attr("r", 5);
        return app.feature.attr('d', app.path);
      } else if ($.mag_cnt.size === 2) {
        app.bottomLeft = app.project(app.bounds[0]);
        app.topRight = app.project(app.bounds[1]);
        app.map.svg.attr('width', app.topRight[0] - app.bottomLeft[0]).attr('height', app.bottomLeft[1] - app.topRight[1]).style('margin-left', app.bottomLeft[0] + 'px').style('margin-top', app.topRight[1] + 'px');
        app.map.g.attr('transform', 'translate(' + -app.bottomLeft[0] + ',' + -app.topRight[1] + ')');
        app.feature.attr("cx", function(d) {
          return app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[0];
        }).attr("cy", function(d) {
          return app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[1];
        }).attr("r", function(d) {
          return Math.abs(d.properties.calculated_magnitude * 4);
        });
        return app.feature.attr('d', app.path);
      }
    };
    app.project = function(x) {
      app.point = app.map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
      return [app.point.x, app.point.y];
    };
    app.setInterval = function() {
      return d3.select(this).style('stroke-width', 3).style('stroke', app.scheme[app.classes - 1]).transition().ease("linear-in").duration(1).attr("r", 20);
    };
    app.outInterval = function() {
      return d3.select(this).style('stroke-width', 1).style('stroke', app.scheme[app.classes - 1]).transition().ease('linear-out').duration(1).attr("r", 5);
    };
    app.bounds = app.bbox_array;
    app.path = d3.geo.path().projection(app.project);
    app.scale = d3.scale.linear().domain([app.min_mag, app.max_mag]).range(d3.range(app.classes));
    app.feature = app.map.g.selectAll('circle').data(collection.features).enter().append('svg:circle').attr('cx', function(d) {
      return app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[0];
    }).attr('cy', function(d) {
      return app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[1];
    }).style('fill', function(d) {
      return app.scheme[(app.scale(d.properties.calculated_magnitude) * 8).toFixed()];
    }).style('stroke', app.scheme[app.classes - 1]).style('opacity', 0.5).attr('r', function(d) {
      return Math.abs(d.properties.calculated_magnitude * 4);
    });
    app.map.on('viewreset', app.reset);
    app.reset();
    get_mag = function(d) {
      return d.properties.calculated_magnitude;
    };
    app.mag_filter = function(min, max) {
      var maxv, minv, selected;
      minv = min;
      maxv = max;
      d3.selectAll("circle").classed("selected", function(d) {
        return maxv >= get_mag(d) && get_mag(d) >= minv;
      });
      selected = d3.selectAll(".selected");
      d3.selectAll("circle").style("display", "none");
      return selected.style("display", "block");
    };
    get_date = function(d) {
      var date, date2, date3, date4;
      date = d.properties.date;
      date2 = date.split('T');
      date3 = date2[0].split('-');
      date4 = date3[0] + date3[1] + date3[2];
      return Math.abs(date4);
    };
    return app.date_filter = function(min, max) {
      var maxv, minv, selected;
      minv = min;
      maxv = max;
      d3.selectAll("circle").classed("selected", function(d) {
        return maxv >= get_date(d) && get_date(d) >= minv;
      });
      selected = d3.selectAll(".selected");
      d3.selectAll("circle").style("display", "none");
      return selected.style("display", "block");
    };
  };

  app.drawseismo = function(collection) {
    app.project = function(x) {
      app.point = app.map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
      return [app.point.x, app.point.y];
    };
    app.path = d3.geo.path().projection(app.project);
    return app.feature = app.map.g.selectAll('path').data(collection.features).enter().append('path').attr('transform', function(d) {
      return 'translate(' + (app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[0]) + ',' + (app.project([d.geometry.coordinates[0], d.geometry.coordinates[1]])[1]) + ')';
    }).attr('d', d3.svg.symbol().type('diamond').size(75)).style('stroke', 'purple').style('stroke-width', 2).style('fill-opacity', 0);
  };

}).call(this);
